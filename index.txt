Team Task
User Name : R N Jayan Keasav Vennih
Title - array.prototype.slice()
Description
    Splice is a comment  used to add or replace content in an array at any index
    it have the syntax - array.splice(start index, delete count of index , item to add)
        example array = ['red', 'blue', 'green', 'yellow']
                array.splice(1, 0, 'black')
                    output array =['red', 'black', 'blue', 'green', 'yellow']
                array.splice(2, 1, 'white')
                     output  array =['red', 'blue', 'white', 'yellow']
        code pen link ( https://codepen.io/Vennih/pen/JjaXXZM?editors=0011 )
    slice will not create a new array. it create changes in the original array itself.


Title - array.prototype.slice()
Description
    Slice is a comment used to creat a copy of original array within selected range
    it have the syntax - array.slice(start index, end index)
    example array = ['red', 'blue', 'green', 'yellow']
                array.slice(1, 3)
                    output array =['blue', 'green']
                array.splice(2, 4)
                     output  array =['green', 'yellow']
        code pen link ( https://codepen.io/Vennih/pen/JjaXXZM?editors=0011 )
    slice will create a copy of original array and will not change the original array.


Title - array.prototype.filter()
Description
    Filter is a comment used to get a copy of original array with the elements which pass certain conditions
    it have the syntax - array.filter(funtion)
        example array1 = [3, 5, 10, 12, 15, 18]
                array1.filter(isBigest)
                function isBigest(value){
                    if (value % 3 == 0){
                        return value
                    }
                }
                    output array = [3, 12, 15, 18]
        code pen link ( https://codepen.io/Vennih/pen/JjaXXZM?editors=0011 )
    filter will create a copy of original array.


Title - array.prototype.map()
Description
    Map is similar to filter but in this comment we can call function to each element of the array.
    it have the syntax - array.map(x => function)
        example array1 = [3, 5, 10, 12, 15, 18]
                root = array1.map(x => x*3);
                    output root=[9,15,30,36,45,54]
        code pen link ( https://codepen.io/Vennih/pen/JjaXXZM?editors=0011 )
    map also create new copy of original array.


Title -array.prototype.reduce()
Description

   NAME:BESPIN.P 
   string slice
	string slicing is the progress by which desired part could be geted
Syntax
slice(indexStart)
slice(indexStart, indexEnd)

array splice
	this method  is used to add or remove an element at particular position
Syntax
splice(start)
splice(start, deleteCount)
splice(start, deleteCount, item1)
splice(start, deleteCount, item1, item2, itemN)

map()
The map() method creates a new array that to change the result that multiplies,add,sub...

Syntax
map((element, index, array) => { /* … */ })
eg.const array1 = [1, 4, 9, 16];

 map1 = array1.map(x => x * 2);

filter()
	The filter() method creates a partial portion that from the orginal array

syntax
filter((element, index, array) => { /* … */ })

reduce()
	it adds the value up	
Syntax
reduce((accumulator, currentValue, currentIndex, array) => { /* … */ })  

     Name:Ananth.P
String.prototype.slice();

slice() is method which extracts the text from one string and returns a new string. Changes to the text in one string do not affect the other string.

Syntax:
slice(indexStart)
slice(indexStart, indexEnd)

example:
const str = 'The quick brown fox jumps over the lazy dog.';


console.log(str.slice(31));

// Expected output: "the lazy dog."


console.log(str.slice(4, 19));

// Expected output: "quick brown fox"

Array.prototype.filter();
 
The filter() method is an iterative method. It calls a provided callbackFn function once for each element in an array, and constructs a new array of all the values for which callbackFn returns 

a truthy value. Array elements which do not pass the callbackFn test are not included in the new array.

Syntax:
// Arrow function
filter((element) => { /* … */ })
filter((element, index) => { /* … */ })
filter((element, index, array) => { /* … */ })

example:
function isBigEnough(value) {
  return value >= 10;
}

const filtered = [12, 5, 8, 130, 44].filter(isBigEnough);
// filtered is [12, 130, 44]


Array.prototype.map();

The map() method is an iterative method. It calls a provided callbackFn function once for each element in an array and constructs a new array from the results.

Syntax:
// Arrow function
map((element) => { /* … */ })
map((element, index) => { /* … */ })
map((element, index, array) => { /* … */ })

// Callback function
map(callbackFn)
map(callbackFn, thisArg)

// Inline callback function
map(function (element) { /* … */ })
map(function (element, index) { /* … */ })
map(function (element, index, array) { /* … */ })
map(function (element, index, array) { /* … */ }, thisArg)

example:
const numbers = [1, 4, 9];
const doubles = numbers.map((num) => num * 2);

console.log(doubles); // [2, 8, 18]
console.log(numbers); // [1, 4, 9]

Array.prototype.splice();

The splice() method is a mutating method. It may change the content of this. If the specified number of elements to insert differs from the number of elements being removed, the array's 

length will be changed as well.

Syntax:
splice(start)
splice(start, deleteCount)
splice(start, deleteCount, item1)
splice(start, deleteCount, item1, item2, itemN)

Example:
const myFish = ["angel", "clown", "mandarin", "sturgeon"];
const removed = myFish.splice(2, 0, "drum");

// myFish is ["angel", "clown", "drum", "mandarin", "sturgeon"]
// removed is [], no elements removed


Array.prototype.reduce();

The reduce() method is an iterative method. It runs a "reducer" callback function over all elements in the array, in ascending-index order, and accumulates them into a single value. Every 

time, the return value of callbackFn is passed into callbackFn again on next invocation as accumulator. The final value of accumulator (which is the value returned from callbackFn on the 

final iteration of the array) becomes the return value of reduce().

example:
onst objects = [{ x: 1 }, { x: 2 }, { x: 3 }];
const sum = objects.reduce(
  (accumulator, currentValue) => accumulator + currentValue.x,
  0,
);

console.log(sum); // 6          